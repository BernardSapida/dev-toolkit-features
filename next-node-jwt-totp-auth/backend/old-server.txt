// Load environment variables from .env file
require("dotenv").config();

const express = require("express");
const cors = require("cors");
const bcrypt = require("bcryptjs");
const jwt = require("jsonwebtoken");
const speakeasy = require("speakeasy");
const QRCode = require("qrcode");
const crypto = require("crypto");

const app = express();

// Middleware
app.use(cors());
app.use(express.json());

// In-memory storage (replace with real database)
const users = new Map();
const totpSettings = new Map();

// Environment variables (in production, use .env file)
const JWT_SECRET = process.env.JWT_SECRET;
const ENCRYPTION_KEY = process.env.ENCRYPTION_KEY;

// Optional: Add validation
if (!process.env.JWT_SECRET) {
  console.warn("⚠️  JWT_SECRET not found in .env file, using fallback");
}
if (!process.env.ENCRYPTION_KEY) {
  console.warn(
    "⚠️  ENCRYPTION_KEY not found in .env file, generating random key"
  );
}

console.log(
  "Server starting with encryption key:",
  ENCRYPTION_KEY.substring(0, 8) + "..."
);

// ================================================================
// UTILITY FUNCTIONS
// ================================================================

// ================================================================
// REPLACE THESE FUNCTIONS IN YOUR server.js
// ================================================================

const encryptSecret = (secret) => {
  try {
    const algorithm = "aes-256-cbc";

    // Ensure key is exactly 32 bytes
    let key;
    if (ENCRYPTION_KEY.length === 64) {
      // Hex string (32 bytes = 64 hex chars)
      key = Buffer.from(ENCRYPTION_KEY, "hex");
    } else {
      // Hash the key to ensure it's 32 bytes
      key = crypto.createHash("sha256").update(ENCRYPTION_KEY).digest();
    }

    const iv = crypto.randomBytes(16);
    const cipher = crypto.createCipher(algorithm, key);

    let encrypted = cipher.update(secret, "utf8", "hex");
    encrypted += cipher.final("hex");

    return `${iv.toString("hex")}:${encrypted}`;
  } catch (error) {
    console.error("Encryption error:", error);
    // Fallback to simple base64 if encryption fails
    return Buffer.from(secret).toString("base64");
  }
};

const decryptSecret = (encryptedSecret) => {
  try {
    // Check if it's base64 encoded (fallback format)
    if (!encryptedSecret.includes(":")) {
      return Buffer.from(encryptedSecret, "base64").toString("utf8");
    }

    const algorithm = "aes-256-cbc";

    // Ensure key is exactly 32 bytes
    let key;
    if (ENCRYPTION_KEY.length === 64) {
      // Hex string (32 bytes = 64 hex chars)
      key = Buffer.from(ENCRYPTION_KEY, "hex");
    } else {
      // Hash the key to ensure it's 32 bytes
      key = crypto.createHash("sha256").update(ENCRYPTION_KEY).digest();
    }

    const parts = encryptedSecret.split(":");
    if (parts.length !== 2) {
      throw new Error("Invalid encrypted data format");
    }

    const iv = Buffer.from(parts[0], "hex");
    const encrypted = parts[1];

    const decipher = crypto.createDecipher(algorithm, key);
    let decrypted = decipher.update(encrypted, "hex", "utf8");
    decrypted += decipher.final("utf8");

    return decrypted;
  } catch (error) {
    console.error("Decryption error:", error);
    // Try base64 fallback
    try {
      return Buffer.from(encryptedSecret, "base64").toString("utf8");
    } catch (fallbackError) {
      throw new Error("Failed to decrypt secret");
    }
  }
};
const generateBackupCodes = () => {
  return Array.from({ length: 8 }, () => {
    return crypto.randomBytes(4).toString("hex").toUpperCase();
  });
};

const authenticateToken = (req, res, next) => {
  const authHeader = req.headers["authorization"];
  const token = authHeader && authHeader.split(" ")[1];

  if (!token) {
    return res.status(401).json({ error: "Access token required" });
  }

  jwt.verify(token, JWT_SECRET, (err, user) => {
    if (err) {
      return res.status(403).json({ error: "Invalid token" });
    }
    req.user = user;
    next();
  });
};

// ================================================================
// AUTH ENDPOINTS
// ================================================================

// Register user
app.post("/api/auth/register", async (req, res) => {
  try {
    const { email, password } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "Email and password required" });
    }

    if (users.has(email)) {
      return res.status(409).json({ error: "User already exists" });
    }

    const hashedPassword = await bcrypt.hash(password, 10);
    const userId = crypto.randomUUID();

    users.set(email, {
      id: userId,
      email,
      password: hashedPassword,
      createdAt: new Date(),
    });

    console.log(`User registered: ${email}`);

    res.json({
      success: true,
      message: "User registered successfully",
      userId,
    });
  } catch (error) {
    console.error("Registration error:", error);
    res.status(500).json({ error: "Registration failed" });
  }
});

// Login user
app.post("/api/auth/login", async (req, res) => {
  try {
    const { email, password, totpCode } = req.body;

    if (!email || !password) {
      return res.status(400).json({ error: "Email and password required" });
    }

    // 1. Verify credentials
    const user = users.get(email);
    if (!user || !(await bcrypt.compare(password, user.password))) {
      return res.status(401).json({ error: "Invalid credentials" });
    }

    // 2. Check if TOTP is required
    const userTotpSettings = totpSettings.get(user.id);
    const totpRequired =
      userTotpSettings?.is_enabled && userTotpSettings?.is_verified;

    if (totpRequired) {
      if (!totpCode) {
        return res.json({
          success: false,
          requiresTOTP: true,
          message: "Please enter your Google Authenticator code",
        });
      }

      // 3. Verify TOTP code
      const totpResult = await verifyTOTPCode(user.id, totpCode);
      if (!totpResult.success) {
        return res.status(401).json(totpResult);
      }
    }

    // 4. Generate JWT token
    const token = jwt.sign({ id: user.id, email: user.email }, JWT_SECRET, {
      expiresIn: "24h",
    });

    console.log(`User logged in: ${email} (TOTP: ${totpRequired})`);

    res.json({
      success: true,
      token,
      user: { id: user.id, email: user.email },
      totpEnabled: totpRequired,
    });
  } catch (error) {
    console.error("Login error:", error);
    res.status(500).json({ error: "Login failed" });
  }
});

// ================================================================
// TOTP ENDPOINTS
// ================================================================

// Setup TOTP (generate QR code)
app.post("/api/mfa/totp/setup", authenticateToken, async (req, res) => {
  try {
    const userId = req.user.id;
    const userEmail = req.user.email;

    // 1. Generate TOTP secret
    const secret = speakeasy.generateSecret({
      name: `2FA Demo (${userEmail})`,
      issuer: "2FA Demo App",
      length: 32,
    });

    console.log("Generated TOTP secret for user:", userId);

    // 2. Encrypt and store secret
    const encryptedSecret = encryptSecret(secret.base32);

    // 3. Generate backup codes
    const backupCodes = generateBackupCodes();
    const hashedBackupCodes = backupCodes.map((code) =>
      crypto.createHash("sha256").update(code).digest("hex")
    );

    // 4. Store in memory (replace with database)
    totpSettings.set(userId, {
      totp_secret_encrypted: encryptedSecret,
      is_enabled: false,
      is_verified: false,
      backup_codes_hash: hashedBackupCodes,
      failed_attempts: 0,
      locked_until: null,
      created_at: new Date(),
    });

    console.log("SETUP userId", totpSettings);

    // 5. Generate QR code
    const qrCodeDataURL = await QRCode.toDataURL(secret.otpauth_url);

    res.json({
      success: true,
      qrCode: qrCodeDataURL,
      backupCodes: backupCodes,
      manualEntryKey: secret.base32,
      instructions: {
        step1: "Install Google Authenticator app on your phone",
        step2: "Scan the QR code or enter the manual key",
        step3: "Enter the 6-digit code from the app to verify setup",
      },
    });
  } catch (error) {
    console.error("TOTP setup error:", error);
    res.status(500).json({ error: "Failed to setup TOTP" });
  }
});

// Verify TOTP code
const verifyTOTPCode = async (userId, userInputCode) => {
  console.log(`🔍 Verifying TOTP: ${userInputCode}`);

  const userTotpSettings = totpSettings.get(userId);

  console.log("SETUP userId", totpSettings);

  if (!userTotpSettings) {
    return { success: false, error: "TOTP not set up" };
  }

  const decryptedSecret = decryptSecret(userTotpSettings.totp_secret_encrypted);

  // Generate current expected code for comparison
  const expectedCode = speakeasy.totp({
    secret: decryptedSecret,
    encoding: "base32",
  });

  console.log(`📱 User code: ${userInputCode}`);
  console.log(`🖥️  Expected: ${expectedCode}`);

  // Very permissive verification
  const verified = speakeasy.totp.verify({
    secret: decryptedSecret,
    token: userInputCode,
    window: 5, // Large window for testing
    encoding: "base32",
  });

  if (verified) {
    userTotpSettings.is_verified = true;
    userTotpSettings.is_enabled = true;
    userTotpSettings.failed_attempts = 0;
    totpSettings.set(userId, userTotpSettings);

    console.log("✅ TOTP verification successful!");
    return { success: true, message: "TOTP verified" };
  } else {
    console.log("❌ TOTP verification failed");
    return { success: false, error: "Invalid code" };
  }
};

app.post("/api/mfa/totp/verify", authenticateToken, async (req, res) => {
  try {
    const { code } = req.body;

    if (!code) {
      return res.status(400).json({ error: "TOTP code required" });
    }

    console.log("CODE", code);

    const result = await verifyTOTPCode(req.user.id, code);
    res.json(result);
  } catch (error) {
    console.error("TOTP verify endpoint error:", error);
    res.status(500).json({ error: "Failed to verify TOTP" });
  }
});

// Get TOTP status
app.get("/api/mfa/totp/status", authenticateToken, (req, res) => {
  const userId = req.user.id;
  const userTotpSettings = totpSettings.get(userId);

  res.json({
    enabled: userTotpSettings?.is_enabled || false,
    verified: userTotpSettings?.is_verified || false,
    setupRequired: !userTotpSettings,
  });
});

// Disable TOTP
app.post("/api/mfa/totp/disable", authenticateToken, (req, res) => {
  const userId = req.user.id;
  totpSettings.delete(userId);

  console.log(`TOTP disabled for user: ${userId}`);

  res.json({
    success: true,
    message: "TOTP disabled successfully",
  });
});

// ================================================================
// TEST ENDPOINTS
// ================================================================

// Get current user info
app.get("/api/user/me", authenticateToken, (req, res) => {
  const user = users.get(req.user.email);
  const userTotpSettings = totpSettings.get(req.user.id);

  res.json({
    id: user.id,
    email: user.email,
    totpEnabled: userTotpSettings?.is_enabled || false,
    totpVerified: userTotpSettings?.is_verified || false,
  });
});

// Debug endpoint to see all data
app.get("/api/debug", (req, res) => {
  res.json({
    users: Array.from(users.entries()).map(([email, user]) => ({
      email,
      id: user.id,
      hasPassword: !!user.password,
    })),
    totpSettings: Array.from(totpSettings.entries()).map(
      ([userId, settings]) => ({
        userId,
        enabled: settings.is_enabled,
        verified: settings.is_verified,
        failedAttempts: settings.failed_attempts,
      })
    ),
  });
});

// ================================================================
// START SERVER
// ================================================================

const PORT = process.env.PORT || 3001;

app.listen(PORT, () => {
  console.log(`🚀 Backend server running on port ${PORT}`);
  console.log(`📱 Test the API at http://localhost:${PORT}`);
  console.log(`🔍 Debug endpoint: http://localhost:${PORT}/api/debug`);
  console.log("\n📋 Quick Test:");
  console.log("1. Register: POST /api/auth/register");
  console.log("2. Login: POST /api/auth/login");
  console.log("3. Setup TOTP: POST /api/mfa/totp/setup");
  console.log("4. Verify TOTP: POST /api/mfa/totp/verify");
});

module.exports = app;
